<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性表</title>
      <link href="/2025/03/22/Linear%20Tables/"/>
      <url>/2025/03/22/Linear%20Tables/</url>
      
        <content type="html"><![CDATA[<h1 id="顺序表（挺简单，直接上代码）"><a href="#顺序表（挺简单，直接上代码）" class="headerlink" title="顺序表（挺简单，直接上代码）"></a>顺序表（挺简单，直接上代码）</h1><ul><li>InitList(&amp;L) : 初始化顺序表</li><li>DestroyList(&amp;L) : 销毁顺序表</li><li>ListEmpty(L) : 判断顺序表是否为空</li><li>ListLength(L) : 获取顺序表中当前元素的数量，即线性表长度</li><li>DisplayList(L) : 输出顺序表</li><li>GetElem(L, i, &amp;e) : 获取顺序表的第i个元素</li><li>LocateElem(L, e) : 查找并返回顺序表中第一个值为e的元素的序号</li><li>ListInsert(&amp;L, i, e) : 在顺序表的第i个位置插入元素e</li><li>ListDelete(&amp;L, i, &amp;e) : 删除顺序表的第i个元素</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[maxsize];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InitList函数用于将顺序表初始化为空表，即将顺序表的长度设置为0</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList *L)</span></span><br><span class="line">&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListEmpty函数用于判断顺序表是否为空。如果顺序表长度为0，则返回1（真），否则返回0（假）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListEmpty</span><span class="params">(SqList L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListLength函数用于获取顺序表中当前元素的数量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ListLength</span><span class="params">(SqList L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> L.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListInsert函数用于在顺序表的第i个位置插入元素e</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType e)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 表头表尾无效插入</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Invalid index\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 表满，无法插入</span></span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length &gt;= maxsize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: List full\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过循环将从第i个位置开始的所有元素向后移动一个位置，然后将新元素e插入到第i个位置，并增加顺序表的长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = L-&gt;length; j &gt;= i; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[j] = L-&gt;data[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data[i - <span class="number">1</span>] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处函数参数是SqList *L，而不是SqList L，表示函数将修改顺序表的内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListDelete</span><span class="params">(SqList *L, <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 表头表尾无效删除</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Error: Invalid index\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过循环将从第i个位置开始的所有元素向前移动一个位置，并减少顺序表的长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; L-&gt;length; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;data[j - <span class="number">1</span>] = L-&gt;data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处函数参数是SqList L，而不是SqList *L，表示函数只读访问顺序表的内容，不修改其内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListPrint</span><span class="params">(SqList L)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    InitList(&amp;L);</span><br><span class="line">    ListInsert(&amp;L, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">    ListInsert(&amp;L, <span class="number">2</span>, <span class="number">20</span>);</span><br><span class="line">    ListInsert(&amp;L, <span class="number">3</span>, <span class="number">30</span>);</span><br><span class="line">    ListInsert(&amp;L, <span class="number">4</span>, <span class="number">40</span>);</span><br><span class="line">    ListPrint(L);</span><br><span class="line">    ListDelete(&amp;L, <span class="number">2</span>);</span><br><span class="line">    ListPrint(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据与结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 函数及其参数</title>
      <link href="/2024/12/19/C%20Function/"/>
      <url>/2024/12/19/C%20Function/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isLeapYear</span><span class="params">(<span class="type">int</span> year)</span><span class="comment">//该处的year是形式参数（形参）的变量名，int是数据类型</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="number">0</span> == year % <span class="number">4</span> &amp;&amp; <span class="number">0</span> != year % <span class="number">100</span>) || <span class="number">0</span> == year % <span class="number">400</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> year = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年份：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;year);<span class="comment">//输入要判断的年份</span></span><br><span class="line">    <span class="keyword">if</span>(isLeapYear(year))<span class="comment">//该处的year是实际参数（实参）的变量名，其数据类型必须要和接收函数的形参类型一致，变量名可以相同或不同</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d是闰年&quot;</span>,year);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d是平年&quot;</span>, year);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel 指南</title>
      <link href="/2024/12/01/Excel%20Handbook/"/>
      <url>/2024/12/01/Excel%20Handbook/</url>
      
        <content type="html"><![CDATA[<h1 id="Excel-公式"><a href="#Excel-公式" class="headerlink" title="Excel 公式"></a>Excel 公式</h1><ul><li>&#x3D;Rank(&#x3D;RANK(L2,$L$2:$L$62,0))</li><li>&#x3D;SUM(E2:K2)</li><li>&#x3D;AVERAGE(E2:K2)</li><li>&#x3D;MID(A2,4,1)&amp;”班”</li><li>&#x3D;IF(AND(L2&gt;650,E2&gt;95,F2&gt;95,G2&gt;95),”有”,”没有”)</li><li>&#x3D;COUNTIF(C2:C62,”1班”)</li><li>&#x3D;VLOOKUP(E3,编号对照!$A$1:$C$19,2,FALSE)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 数学问题</title>
      <link href="/2024/11/26/C%20Math%20Questions/"/>
      <url>/2024/11/26/C%20Math%20Questions/</url>
      
        <content type="html"><![CDATA[<h1 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断素数的函数isPrime</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//质数(素数)是指在大于 1 的自然数中，除了 1 和它自身外，不能被其他自然数整除的数</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查i=2到i=sqrt(n)即n的平方根是否有因子</span></span><br><span class="line">    <span class="comment">//在n较大时，对比i=2到i&lt;=n-1提高了效率</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//斐波那契数列的函数fibonacci</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//递归调用</span></span><br><span class="line">        <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>)+fibonacci(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合A与集合B的并集（AUB）"><a href="#集合A与集合B的并集（AUB）" class="headerlink" title="集合A与集合B的并集（AUB）"></a>集合A与集合B的并集（AUB）</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并两个线性表，结果存储在第三个线性表中，不包含重复元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unionList</span><span class="params">(List LA, List LB, List *LC)</span> &#123;</span><br><span class="line">    <span class="type">int</span> lena, i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    InitList(LC);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= LA.Length; i++) &#123;</span><br><span class="line">        GetElem(LA, i, &amp;e);</span><br><span class="line">        ListInsert(LC, i, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lena = LA.Length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= LB.Length; i++) &#123;</span><br><span class="line">        GetElem(LB, i, &amp;e);</span><br><span class="line">        <span class="keyword">if</span> (!LocateList(LA,e)) &#123;</span><br><span class="line">            ListInsert(LC, ++lena, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 数学问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 算法</title>
      <link href="/2024/11/17/C%20Algorithm/"/>
      <url>/2024/11/17/C%20Algorithm/</url>
      
        <content type="html"><![CDATA[<h1 id="冒泡排序-起泡法"><a href="#冒泡排序-起泡法" class="headerlink" title="冒泡排序 &#x2F; 起泡法"></a>冒泡排序 &#x2F; 起泡法</h1><ul><li>冒泡排序（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。以下为核心代码段，可单独作为排序函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><ul><li>选择排序（Selection Sort）是一种简单直观的排序算法。它的工作原理是首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。以下为核心代码段，可单独作为排序函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt; arr[minIndex])</span><br><span class="line">        &#123;</span><br><span class="line">            minIndex = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将每次找到的最小元素放到已排序序列的开头</span></span><br><span class="line">    <span class="type">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[minIndex];</span><br><span class="line">    arr[minIndex] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><ul><li>递归（Recursion）是一种编程技巧，它利用函数的调用自身的特点，来解决一些问题。递归函数一般都有一个基线条件，当这个条件满足时，递归函数就停止调用自身，并返回一个基准值。以下为递归函数的模板</li></ul><div class="note warning flat"><p>注意：递归函数的调用栈的最大深度受限于系统的内存限制，因此，在计算量大的情况下，递归函数的使用要慎重</p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="记忆化搜索-TODO"><a href="#记忆化搜索-TODO" class="headerlink" title="记忆化搜索 TODO"></a>记忆化搜索 TODO</h1><!-- * 记忆化搜索（Memoization Search）是一种优化搜索算法，它通过存储中间结果，避免重复计算，从而达到优化搜索效率的目的。以下为核心代码段，可单独作为搜索函数```Cint[,] memo = new int[n + 1, n + 1];int minCost(int[] cost, int n){    if (n == 0 || n == 1)    {        return 0;    }    if (memo[n, cost[n - 1]] != -1)    {        return memo[n, cost[n - 1]];    }    int min = int.MaxValue;    for (int i = 1; i <= n; i++)    {        int temp = minCost(cost, n - i) + i * cost[n - 1];        if (temp < min)        {            min = temp;        }    }    memo[n, cost[n - 1]] = min;    return min;}``` -->]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 矩阵转置与乘积</title>
      <link href="/2024/11/15/C%20Matrix/"/>
      <url>/2024/11/15/C%20Matrix/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>C#中矩阵是基于二维数组的</p></div><h1 id="1-矩阵转置"><a href="#1-矩阵转置" class="headerlink" title="1.矩阵转置"></a>1.矩阵转置</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i, j, a[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">9</span>&#125;,&#123;<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>&#125;,&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>&#125;,&#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">3</span>&#125; &#125;, b[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;转置前数组矩阵：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i][j] = a[i][j];<span class="comment">//存储原矩阵,方便后续矩阵相乘</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//换行符放在两层循环间，使得一行输出完4个就换行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转置矩阵</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//i&gt;j就是下三角元素，避免重复转置</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = a[i][j];</span><br><span class="line">            a[i][j] = a[j][i];</span><br><span class="line">            a[j][i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;转置后数组矩阵：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, a[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-矩阵乘积"><a href="#2-矩阵乘积" class="headerlink" title="2.矩阵乘积"></a>2.矩阵乘积</h1><ul><li>基于上面的代码段我们要新定义一个矩阵来存放两个矩阵的乘积，然后再定义一个变量用于计算矩阵乘积的循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> k,c[<span class="number">4</span>][<span class="number">4</span>] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//最内层的循环原理为：矩阵乘积的第i行第j列等于矩阵b的第i行第k与矩阵a的第k列的乘积之和</span></span><br><span class="line">        <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[i][j] += b[i][k] * a[k][j];<span class="comment">//这一段是计算矩阵乘积的核心算法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后再写一个两层循环输出矩阵乘积</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;矩阵乘积：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, c[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 运算符与表达式</title>
      <link href="/2024/10/20/C%20Operators%20And%20Expressions/"/>
      <url>/2024/10/20/C%20Operators%20And%20Expressions/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>C# 运算符优先级：<code>算术运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符</code></p></div><div class="note warning flat"><p>本文只讲以上提到的四种运算符</p></div><h1 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h1><p>算术运算符即+、-、*、&#x2F;、%等符号，用来进行数值计算。</p><table><thead><tr><th>算数运算符</th><th>含义</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>&#x2F;</td><td>除法</td></tr><tr><td>%</td><td>取模</td></tr></tbody></table><h1 id="2-关系运算符"><a href="#2-关系运算符" class="headerlink" title="2.关系运算符"></a>2.关系运算符</h1><p>关系运算符即&#x3D;&#x3D;、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;等符号，用来比较两个值之间的大小关系。</p><table><thead><tr><th>关系运算符</th><th>含义</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr></tbody></table><h1 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="3.逻辑运算符"></a>3.逻辑运算符</h1><p>逻辑运算符即&amp;&amp;、||、!等符号，用来进行逻辑运算。</p><table><thead><tr><th>逻辑运算符</th><th>含义</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与</td></tr><tr><td>||</td><td>或</td></tr><tr><td>!</td><td>非</td></tr></tbody></table><h1 id="4-赋值运算符"><a href="#4-赋值运算符" class="headerlink" title="4.赋值运算符"></a>4.赋值运算符</h1><p>赋值运算符即&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;等符号，用来给变量赋值。</p><table><thead><tr><th>赋值运算符</th><th>含义</th><th>用法</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a &#x3D; b</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a +&#x3D; b</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a -&#x3D; b</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a *&#x3D; b</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a &#x2F;&#x3D; b</td></tr><tr><td>%&#x3D;</td><td>取模等于</td><td>a %&#x3D; b</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 语句中的选择结构和循环结构</title>
      <link href="/2024/10/19/C%20Statement/"/>
      <url>/2024/10/19/C%20Statement/</url>
      
        <content type="html"><![CDATA[<h1 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1.选择结构"></a>1.选择结构</h1><h2 id="1-1-if语句"><a href="#1-1-if语句" class="headerlink" title="1.1 if语句"></a>1.1 if语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//若条件为真，则输出下面的语句，否则跳过if语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>C#中把任何非零和非空的值假定为 true，把零或 null 假定为 false</p></div><div class="note info flat"><p>if语句用来实现两个分支的选择结构，而switch语句用来实现多分支的选择结构</p></div><h2 id="1-2-if…else语句"><a href="#1-2-if…else语句" class="headerlink" title="1.2 if…else语句"></a>1.2 if…else语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果条件为真则将执行的语句 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果条件为假则将执行的语句 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-if…else-if…else语句"><a href="#1-3-if…else-if…else语句" class="headerlink" title="1.3 if…else if…else语句"></a>1.3 if…else if…else语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果条件1为真则将执行的语句 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////// 一旦某个 else if 已执行，其他的 else if 或 else 将不会被执行</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果条件2为真则将执行的语句 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果条件3为真则将执行的语句 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////// else 必须在所有 else if 之后</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 如果所有条件都不为真则将执行的语句 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-嵌套if语句"><a href="#1-4-嵌套if语句" class="headerlink" title="1.4 嵌套if语句"></a>1.4 嵌套if语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 当布尔表达式 1 为真时执行 */</span></span><br><span class="line">    <span class="keyword">if</span>(判断条件<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">/* 当布尔表达式 2 为真时执行 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>C#中嵌套 if…else 语句是合法的，这意味着可以在一个 if 或 else if 语句内使用另一个 if 或 else if 语句</p></div><h2 id="1-5-switch语句"><a href="#1-5-switch语句" class="headerlink" title="1.5 switch语句"></a>1.5 switch语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please write a number of 1-3:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="keyword">switch</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">//在每个case语句后打个break，使每一次执行之后均可直接跳出switch语句，从而不再执行后面的语句</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">printf</span>(<span class="string">&quot;1 is true\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;2 is true\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;3 is true\n&quot;</span>);<span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>switch语句用来实现多分支的选择结构，它会比较表达式的值与 case 标签值，如果匹配成功，则从这个 case 后的语句开始执行，并执行后面所有 case 后的语句，如果没有一个匹配，则执行 default 后的语句</p></div><h1 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2.循环结构"></a>2.循环结构</h1><div class="note info flat"><p>在前面已经将出现过break，那么顺便讲一下break和continue语句</p></div><ul><li>break语句：只作用于循环语句和switch语句，用于终止当前循环，跳出循环体，并执行循环后的语句</li><li>continue语句：用于跳过当次循环，不管循环体是否执行完毕，直接进入下一次循环</li></ul><h2 id="2-1-for语句"><a href="#2-1-for语句" class="headerlink" title="2.1 for语句"></a>2.1 for语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当i不满足i&lt;101时，条件表达式为假，循环结束</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">101</span>;i++)<span class="comment">//i++用另一种表达就是i=i+1或者i+=1，i++在完成一个循环后才会执行</span></span><br><span class="line">    &#123;</span><br><span class="line">       sum+=i;<span class="comment">//累加i，这行语句等价于sum=sum+i</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum = %d\n&quot;</span>,sum);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>for语句会在初始化表达式和条件表达式都为真的情况下，执行循环体，如果条件表达式为假将跳出循环</p></div><h2 id="2-2-while语句"><a href="#2-2-while语句" class="headerlink" title="2.2 while语句"></a>2.2 while语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 循环体 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info flat"><p>while语句每次循环前都会先判断表达式是否为真，为真则执行循环体，为假则跳出循环</p></div><h2 id="2-3-do…while语句"><a href="#2-3-do…while语句" class="headerlink" title="2.3 do…while语句"></a>2.3 do…while语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 循环体 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><div class="note info flat"><p>do…while语句的语法与while语句类似，但是它第一次是不需要判断的，直接执行循环体，再之后加入判断是否执行循环体</p></div><blockquote><p><strong>Tips:</strong><br>1.嵌套的循环控制变量不能相同<br>2.内循环的循环控制变量变化快，外循环的循环控制变量变化慢<br>3.确定好循环体起始点，另外逻辑很重要</p></blockquote><h1 id="减少语句嵌套小技巧：（合理使用，具体情况具体分析）"><a href="#减少语句嵌套小技巧：（合理使用，具体情况具体分析）" class="headerlink" title="减少语句嵌套小技巧：（合理使用，具体情况具体分析）"></a>减少语句嵌套小技巧：（合理使用，具体情况具体分析）</h1><blockquote><p>1.表驱动法<br>2.提早返回<br>3.面向对象<br>4.高阶函数<br>5.空值判断</p></blockquote><ul><li>首先来看看没有使用任何技巧的情况</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (character.Ready) &#123;</span><br><span class="line">    <span class="keyword">if</span> (character.Grounded) &#123;</span><br><span class="line">        <span class="keyword">if</span> (character.Crounching) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!character.IsMoving) &#123;</span><br><span class="line">                character.Attack();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                console.writeline(<span class="string">&quot;Moving&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            console.writeline(<span class="string">&quot;Not Crounching&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        console.writeline(<span class="string">&quot;Not Grounded&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    console.writeline(<span class="string">&quot;Not Ready&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>提早返回（卫语句–就是所谓的防御性编程）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其实就是逆向思维，颠倒了一下判断逻辑</span></span><br><span class="line"><span class="keyword">if</span> (!character.Ready) &#123;</span><br><span class="line">    console.writeline(<span class="string">&quot;Not Ready&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!character.Grounded) &#123;</span><br><span class="line">    console.writeline(<span class="string">&quot;Not Grounded&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!character.Crounching) &#123;</span><br><span class="line">    console.writeline(<span class="string">&quot;Not Crouching&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (character.IsMoving) &#123;</span><br><span class="line">    console.writeline(<span class="string">&quot;Moving&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">character.Attack();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制的学习</title>
      <link href="/2024/10/15/Binary%20Learning/"/>
      <url>/2024/10/15/Binary%20Learning/</url>
      
        <content type="html"><![CDATA[<p>在计算机科学中，原码、反码和补码是数字表示方法，它们用于简化计算机中数字的算术运算，尤其是二进制数的加减运算</p><p>首先引入一下,一串二进制数101110001，它可以转化化为<code>pow(2,8)+pow(2,6)+pow(2,5)+pow(2,4)+pow(2,0)=256+64+32+16+1=369</code></p><h2 id="1-原码（以十进制-5为例）"><a href="#1-原码（以十进制-5为例）" class="headerlink" title="1.原码（以十进制-5为例）"></a>1.原码（以十进制-5为例）</h2><p>使用最高位（最左边的一位）表示符号：0表示正数，1表示负数。其余位表示数值的大小</p><ul><li>-5的原码为：0101（简写，完整的写法是：1000 0101）</li></ul><h2 id="2-反码（以十进制-5为例）"><a href="#2-反码（以十进制-5为例）" class="headerlink" title="2.反码（以十进制-5为例）"></a>2.反码（以十进制-5为例）</h2><p>正数的反码就是其本身，负数的反码是其原码除符号位外所有位取反</p><ul><li>-5的反码为：1010（简写，完整的写法是：1111 1010）</li></ul><h2 id="3-补码（以十进制-5为例）"><a href="#3-补码（以十进制-5为例）" class="headerlink" title="3.补码（以十进制-5为例）"></a>3.补码（以十进制-5为例）</h2><p>正数的补码就是其本身，负数的补码是其反码加1</p><ul><li>-5的补码为：1011（简写，完整的写法是：1111 1011）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学生活开始！</title>
      <link href="/2024/09/23/My%20College%20life/"/>
      <url>/2024/09/23/My%20College%20life/</url>
      
        <content type="html"><![CDATA[<div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>大学记录线</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-10-05 喜欢CSGO！</p></div></div><div class='timeline-item-content'><img src="https://gitee.com/BigKnight53/gallery/raw/master/album/XingYe.webp" alt="CSGO" width="400" /></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-09-23 好欸，是演唱会！</p></div></div><div class='timeline-item-content'><img src="https://gitee.com/BigKnight53/gallery/raw/master/album/wanhui.webp" alt="音乐节" width="400" /></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2024-09-20 好欸，是晚霞！</p></div></div><div class='timeline-item-content'><img src="https://gitee.com/BigKnight53/gallery/raw/master/album/wanxia.webp" alt="晚霞" width="400" /></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 生活日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 无损修复更新</title>
      <link href="/2023/07/24/Windows%2011%20Update/"/>
      <url>/2023/07/24/Windows%2011%20Update/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到很难解决的Windows-问题时，才建议使用此方法"><a href="#遇到很难解决的Windows-问题时，才建议使用此方法" class="headerlink" title="遇到很难解决的Windows 问题时，才建议使用此方法"></a>遇到很难解决的Windows 问题时，才建议使用此方法</h2><h4 id="此方法通常默认选项将保留个人文件、设置、应用等"><a href="#此方法通常默认选项将保留个人文件、设置、应用等" class="headerlink" title="此方法通常默认选项将保留个人文件、设置、应用等"></a>此方法通常默认选项将保留个人文件、设置、应用等</h4><p><a href="https://go.microsoft.com/fwlink/?linkid=2156295">点此下载MediaCreationToolW11</a> 下载后使用ISO方式进行更新，建议先上网搜寻此软件使用方法 。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 11 小组件</title>
      <link href="/2023/05/02/Widgets/"/>
      <url>/2023/05/02/Widgets/</url>
      
        <content type="html"><![CDATA[<p>如果您不喜欢小组件，您可以禁用甚至卸载该功能，并在改变主意时重新安装它。</p><h2 id="在-Windows-11-中禁用小组件"><a href="#在-Windows-11-中禁用小组件" class="headerlink" title="在 Windows 11 中禁用小组件"></a>在 Windows 11 中禁用小组件</h2><ol><li>右键单击任务栏</li><li>选择任务栏设置</li><li>在“任务栏项”下，将“小组件”切换为“关闭”。</li></ol><p>请注意，这将从任务栏中删除小组件图标，但它们如上所述继续运行。</p><p>在了解如何卸载小组件之前，请查看如何删除小组件。</p><h2 id="删除Windows-11-中的小组件"><a href="#删除Windows-11-中的小组件" class="headerlink" title="删除Windows 11 中的小组件"></a>删除Windows 11 中的小组件</h2><ol><li>单击任务栏上的图标以启动小组件</li><li>在这里，您会注意到几个小组件，每个小组件都有一个三点图标，单击三点图标以获取更多选项，然后选择要删除的小组件。</li></ol><p>以这种方式删除的小部件可以重新添加回来，方法如下：</p><h3 id="再次将已删除的小组件重新添加到-Windows-11"><a href="#再次将已删除的小组件重新添加到-Windows-11" class="headerlink" title="再次将已删除的小组件重新添加到 Windows 11"></a>再次将已删除的小组件重新添加到 Windows 11</h3><ol><li>打开小组件</li><li>向下滚动并单击添加小组件</li><li>选择一个小部件，然后单击“+”图标添加一个。</li><li>完成，向上滚动以注意新添加的小组件。</li></ol><h3 id="使用-Powershell-卸载-Windows-11-小组件"><a href="#使用-Powershell-卸载-Windows-11-小组件" class="headerlink" title="使用 Powershell 卸载 Windows 11 小组件"></a>使用 Powershell 卸载 Windows 11 小组件</h3><ol><li>按 win 键并键入 Powershell，单击以管理员身份运行</li><li>复制并粘贴此命令，然后按回车键winget uninstall “Windows web experience Pack”</li><li>Windows 11 卸载负责小组件的 Windows Web 体验包 [[MicrosoftWindows.Client.WebExperience_cw5n1h2txyewy]。</li></ol><h2 id="在-Windows-11-中恢复-重新安装小组件"><a href="#在-Windows-11-中恢复-重新安装小组件" class="headerlink" title="在 Windows 11 中恢复&#x2F;重新安装小组件"></a>在 Windows 11 中恢复&#x2F;重新安装小组件</h2><ol><li>要找回小部件，请访问浏览器中的 <a href="https://www.microsoft.com/store/productId/9MSSGKG348SP">Windows Web 体验商店链接</a></li><li>单击“获取”按钮并进一步安装它</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Windows优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法</title>
      <link href="/2022/08/09/Markdown%20Grammar/"/>
      <url>/2022/08/09/Markdown%20Grammar/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Markdown语法自带格式"><a href="#1-Markdown语法自带格式" class="headerlink" title="1.Markdown语法自带格式"></a>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块"><a href="#1-1-代码块" class="headerlink" title="1.1 代码块"></a>1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="1-2-多级标题"><a href="#1-2-多级标题" class="headerlink" title="1.2 多级标题"></a>1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="1-3-文字样式"><a href="#1-3-文字样式" class="headerlink" title="1.3 文字样式"></a>1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<del>删除</del>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用"><a href="#1-4-引用" class="headerlink" title="1.4 引用"></a>1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><blockquote><p> Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>….</p></blockquote></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="1-5-分割线"><a href="#1-5-分割线" class="headerlink" title="1.5 分割线"></a>1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><hr><hr></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="1-6-列表-跟空格都可以"><a href="#1-6-列表-跟空格都可以" class="headerlink" title="1.6 列表(*,+,-跟空格都可以)"></a>1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表"><a href="#1-6-1-无序列表" class="headerlink" title="1.6.1 无序列表"></a>1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="1-6-2-有序列表"><a href="#1-6-2-有序列表" class="headerlink" title="1.6.2 有序列表"></a>1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>1.<br>2.<br>3.<br>4. </p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="1-7-图片"><a href="#1-7-图片" class="headerlink" title="1.7 图片"></a>1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="1-8-表格"><a href="#1-8-表格" class="headerlink" title="1.8 表格"></a>1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="1-9-公式"><a href="#1-9-公式" class="headerlink" title="1.9 公式"></a>1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">示例源码</button><button type="button" class="tab " data-href="分栏-2">渲染演示</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)&#x3D;\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/04/01/Hello%20world/"/>
      <url>/2021/04/01/Hello%20world/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到 <a href="https://hexo.io/">Hexo</a>！ 这是我的第一篇文章。有关详细信息，请查看 <a href="https://hexo.io/docs/">documentation</a> 如果您在使用 Hexo 时遇到任何问题，您可以在 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> 中找到答案，也可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 上询问 Hexo 。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>更多信息： <a href="https://hexo.io/docs/writing.html">写作</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>详细信息： <a href="https://hexo.io/docs/server.html">服务器</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>详细信息： <a href="https://hexo.io/docs/generating.html">生成</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>详细信息： <a href="https://hexo.io/docs/one-command-deployment.html">部署</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
